<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>www</title>
    <link>https://go-www.com/</link>
    <description>Recent content on www</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Sep 2017 10:17:49 +0200</lastBuildDate>
    
	<atom:link href="https://go-www.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How It Works</title>
      <link>https://go-www.com/post/how-it-works/</link>
      <pubDate>Tue, 12 Sep 2017 10:17:49 +0200</pubDate>
      
      <guid>https://go-www.com/post/how-it-works/</guid>
      <description>By typing www will start a web server on port 8000 by default and use as document root the directory where the command was call
$ www  A different document root may be specified by using the -r option, for example:
$ www -r /tmp  By default www listen on port 8000, this can be changed by using the -p option:
$ www -p 80   may need root privileges</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt - Free SSL/TLS Certificates</title>
      <link>https://go-www.com/post/letsencrypt/</link>
      <pubDate>Mon, 11 Sep 2017 21:36:00 +0200</pubDate>
      
      <guid>https://go-www.com/post/letsencrypt/</guid>
      <description> Just type:
www -s your-domain.tld  If want to serve content from an specific directory:
www -s your-domain.tld -r /tmp  That&amp;rsquo;s it :-).
Requirements You need a valid domain/subdomain pointing to a valid public IP, also port 443 needs to be open.
Your DNS record may look like this:
your-domain.tld IN A X.X.X.X   In where X.X.X.X is your public IP
 </description>
    </item>
    
    <item>
      <title>Errors</title>
      <link>https://go-www.com/post/errors/</link>
      <pubDate>Mon, 11 Sep 2017 21:35:00 +0200</pubDate>
      
      <guid>https://go-www.com/post/errors/</guid>
      <description>When using option -s yourdomain.tld if you get errors similar like:
acme/autocert: certificate is not valid yet acme/autocert: missing server name  Besides checking that your domain is pointing to a proper valid IP, also check that your computers clock is synchronised to the network, for this you could use NTP</description>
    </item>
    
    <item>
      <title>The code</title>
      <link>https://go-www.com/post/the-code/</link>
      <pubDate>Mon, 11 Sep 2017 20:35:00 +0200</pubDate>
      
      <guid>https://go-www.com/post/the-code/</guid>
      <description>The full code is close to 100 lines using packages from the standard library and the acme/autocert
package main import ( &amp;quot;crypto/ecdsa&amp;quot; &amp;quot;crypto/elliptic&amp;quot; &amp;quot;crypto/rand&amp;quot; &amp;quot;crypto/tls&amp;quot; &amp;quot;crypto/x509&amp;quot; &amp;quot;crypto/x509/pkix&amp;quot; &amp;quot;encoding/pem&amp;quot; &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;math/big&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;time&amp;quot; &amp;quot;golang.org/x/crypto/acme/autocert&amp;quot; ) type responseWriter struct { http.ResponseWriter statusCode int } func (w *responseWriter) WriteHeader(statusCode int) { w.statusCode = statusCode w.ResponseWriter.WriteHeader(statusCode) } func www(root string, quiet bool) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { start := time.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://go-www.com/about/</link>
      <pubDate>Sun, 10 Sep 2017 13:09:04 +0200</pubDate>
      
      <guid>https://go-www.com/about/</guid>
      <description> What it is www? A web server that serves only static content, it can send traffic in plain HTTP, or HTTPS by using a self signed certificate localhost or using a valid certificate by using letsencrypt.
Why ? Because of the need to share, test via HTTP/HTTPS the contents of a directory.
The idea came from the need to simplify this commands:
python -m SimpleHTTPServer  or
twistd -n web --path /foo/bar/baz  </description>
    </item>
    
    <item>
      <title>compile from source</title>
      <link>https://go-www.com/linux/</link>
      <pubDate>Mon, 20 Mar 2017 16:17:00 +0000</pubDate>
      
      <guid>https://go-www.com/linux/</guid>
      <description>pre-compiled (Linux) Using https://packagecloud.io/nbari/www
For deb:
curl -s https://packagecloud.io/install/repositories/nbari/www/script.deb.sh | sudo bash   
Then:
apt install www  For rpm:
curl -s https://packagecloud.io/install/repositories/nbari/www/script.rpm.sh | sudo bash   
Then:
yum install www  Download binary linux amd64: https://dl.bintray.com/nbari/www/www_2.0.0_linux_amd64.tar.gz
See more: https://bintray.com/nbari/www/www/2.0.0</description>
    </item>
    
    <item>
      <title>pkg install go-www</title>
      <link>https://go-www.com/freebsd/</link>
      <pubDate>Mon, 20 Mar 2017 16:17:00 +0000</pubDate>
      
      <guid>https://go-www.com/freebsd/</guid>
      <description>To install www on FreeBSD:
$ pkg install go-www  https://www.freshports.org/www/go-www</description>
    </item>
    
    <item>
      <title>homebrew</title>
      <link>https://go-www.com/mac/</link>
      <pubDate>Thu, 16 Mar 2017 22:54:37 +0100</pubDate>
      
      <guid>https://go-www.com/mac/</guid>
      <description>To install www on Mac OS X:
$ brew tap nbari/homebrew-www  Next:
$ brew install www  </description>
    </item>
    
  </channel>
</rss>